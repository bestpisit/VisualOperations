datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model Configuration {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model RequestLog {
  id        String   @id @default(cuid())
  userEmail String?  @db.VarChar(150) // Limit string length
  method    String   @db.VarChar(10) // Short methods (GET, POST)
  path      String   @db.VarChar(255) // Path limit (optional)
  ip        String?  @db.VarChar(45) // IPv6 max length is 45 chars
  status    Int?     @db.Integer
  timestamp DateTime @default(now())
}

model AccessLog {
  id        String   @id @default(cuid())
  userEmail String   @db.VarChar(150) // Limit string length
  userRole  String   @db.VarChar(50) // Limit string length
  method    String   @db.VarChar(10) // Short methods (GET, POST)
  path      String   @db.VarChar(255) // Path limit (optional)
  ip        String?  @db.VarChar(45) // IPv6 max length is 45 chars
  status    Int?     @db.Integer
  timestamp DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Group
model Group {
  id         Int         @id @default(autoincrement())
  name       String
  userGroups UserGroup[]
  ACLs       ACL[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//userGroup
model UserGroup {
  userId  String
  groupId Int

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  salt          String?

  roleId     Int?
  role       Role?       @relation(fields: [roleId], references: [id])
  userGroups UserGroup[]
  ACLs       ACL[]

  status                String    @default("PENDING")
  requireChangePassword Boolean   @default(false)
  project               Project[]

  tokenVersion      Int      @default(0) // Track token version for invalidation
  passwordUpdatedAt DateTime @default(now()) // Track when password was last updated

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Deployment Deployment[]
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique // Ensure the role name is unique
  RolePermissions RolePermission[]
  ACL             ACL[]
  User            User[]
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  RolePermissions RolePermission[]
}

model RolePermission {
  id           Int @id @default(autoincrement())
  roleId       Int
  permissionId Int

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model ACL {
  id      String  @id @default(cuid())
  userId  String?
  groupId Int?
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  projectId Int?
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  providerId Int?
  Provider   Provider? @relation(fields: [providerId], references: [id], onDelete: Cascade)

  roleId Int // Foreign key to Role
  Role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Project model
model Project {
  id          Int     @id @default(autoincrement())
  uuid        String  @unique
  name        String
  description String?
  ownerId     String
  owner       User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  isRefreshing Boolean @default(false)

  ACLs ACL[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ProjectProvider ProjectProvider[]

  ProjectVersion ProjectVersion[]

  Deployment Deployment[]

  ResourceQuota ProjectResourceQuota[]

  ProjectTemplate ProjectTemplate[]

  @@unique([ownerId, name])
}

// Provider model
model Provider {
  id          Int     @id @default(autoincrement())
  uuid        String  @unique @default(cuid())
  name        String  @unique
  description String?

  config Json
  ACLs   ACL[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ProjectProvider ProjectProvider[]

  terraformProviderId String
  terraformProvider   TerraformProvider @relation(fields: [terraformProviderId], references: [id])

  resourceId String?
  resource   Resource? @relation(fields: [resourceId], references: [uuid], onDelete: Cascade)

  Secret     Secret[]
  Deployment Deployment[]

  UniqueConstraint UniqueConstraint[]
}

// Provider model
model TerraformProvider {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  details     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  type String?

  providers         Provider[]
  TemplateProviders TemplateProvider[]
}

// ProjectProvider Model
model ProjectProvider {
  id         Int @id @default(autoincrement())
  projectId  Int
  providerId Int

  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([projectId, providerId])
}

// ProjectVersion Model
model ProjectVersion {
  id         Int    @id @default(autoincrement())
  projectId  Int
  version    String
  resources  Json // Stores version-specific resource information in JSON format
  status     String
  actionUser String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Deployment Model
model Deployment {
  id     String  @id @default(cuid())
  type   String  @default("undefined")
  name   String? @default("Deployment")
  status String
  logs   Json

  config     Json
  planOutput Json?
  plan       Boolean @default(false)

  preDeploymentState  Json?
  postDeploymentState Json?

  parentDeploymentId String?
  parentDeployment   Deployment?  @relation("ParentChild", fields: [parentDeploymentId], references: [id])
  childDeployments   Deployment[] @relation("ParentChild")

  destroy    Boolean   @default(false)
  active     Boolean   @default(true)
  userId     String?
  user       User?     @relation(fields: [userId], references: [id])
  projectId  String
  project    Project   @relation(fields: [projectId], references: [uuid])
  providerId String?
  provider   Provider? @relation(fields: [providerId], references: [uuid])

  resourceDependents Resource[] @relation(name: "DeploymentResourceDependent")

  templateId String
  template   Template @relation(fields: [templateId], references: [id])

  constraints      UniqueConstraint[] // Relation to unique constraints
  constraintValues Json[] // Stores constraint values in JSON format

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Secret    Secret[]
  Resource  Resource[]

  @@index([projectId, templateId])
}

// ResourceQuota Model
model ProjectResourceQuota {
  id        Int     @id @default(autoincrement())
  projectId String
  project   Project @relation(fields: [projectId], references: [uuid], onDelete: Cascade)

  quotas Json // { "cpu": "16", "ram": "64GB", "storage": "500GB" }
  usage  Json // { "cpu": "10", "ram": "40GB", "storage": "300GB" }

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId])
}

model ResourceQuotaUsage {
  id         Int      @id @default(autoincrement())
  resourceId String   @unique
  resource   Resource @relation(fields: [resourceId], references: [uuid], onDelete: Cascade)

  usage Json // { "cpu": "4", "ram": "16GB", "storage": "100GB" }

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Templates for Proxmox, Nutanix, Docker, Nginx, etc.
model Template {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  type        String
  details     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ProjectTemplate   ProjectTemplate[]
  Deployment        Deployment[]
  TemplateProviders TemplateProvider[]
}

model TemplateProvider {
  id         String   @id @default(cuid())
  templateId String
  providerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  template Template          @relation(fields: [templateId], references: [id], onDelete: Cascade)
  provider TerraformProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([templateId, providerId]) // Ensures unique combination of template and provider
}

model ProjectTemplate {
  id          Int    @id @default(autoincrement())
  projectUUID String
  templateId  String

  project  Project  @relation(fields: [projectUUID], references: [uuid], onDelete: Cascade)
  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([projectUUID, templateId])
}

model Resource {
  uuid         String     @id @default(cuid())
  name         String
  description  String?
  type         String // The type of resource (e.g., VM, Container, etc.)
  deploymentId String
  deployment   Deployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
  details      Json // Stores resource-specific configuration in JSON format
  config       Json? // Stores resource-specific configuration in JSON format

  tags String[] @default([])

  constraints UniqueConstraint[] // Relation to unique constraints

  dependencies ResourceDependency[] @relation("ResourceDependencies") // What this resource relies on
  dependents   ResourceDependency[] @relation("ResourceDependents") // Who relies on this resource

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Provider  Provider[]

  deploymentDependents Deployment[]        @relation(name: "DeploymentResourceDependent")
  ResourceQuotaUsage   ResourceQuotaUsage?
}

model ResourceDependency {
  id String @id @default(cuid())

  dependentId String // The resource that relies on another
  dependent   Resource @relation("ResourceDependents", fields: [dependentId], references: [uuid], onDelete: Cascade)

  dependencyId String // The resource that is required
  dependency   Resource @relation("ResourceDependencies", fields: [dependencyId], references: [uuid])

  createdAt DateTime @default(now())

  @@unique([dependentId, dependencyId]) // Prevents duplicate relationships
}

model Secret {
  id     String @id @default(uuid())
  secret String
  iv     String
  tag    String

  deploymentId String?
  deployment   Deployment? @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
  providerId   String?
  provider     Provider?   @relation(fields: [providerId], references: [uuid], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UniqueConstraint {
  id    String @id @default(uuid()) // Unique constraint ID
  key   String // Constraint type (e.g., "vm-name", "vm-ip-address")
  value String // Unique value (e.g., "web-server-01", "192.168.1.1")
  scope String @default("global") // Constraint scope (e.g., "global", "project", "deployment")

  createdAt DateTime @default(now())

  resourceId String?
  resource   Resource? @relation(fields: [resourceId], references: [uuid], onDelete: Cascade)

  deploymentId String?
  deployment   Deployment? @relation(fields: [deploymentId], references: [id], onDelete: SetNull)

  providerId String?
  provider   Provider? @relation(fields: [providerId], references: [uuid], onDelete: Cascade)

  @@unique([key, value, scope]) // Enforce uniqueness at the database level
}

model Image {
  key       String   @id
  label     String?
  filePath  String // Example: "/app/storage/docker.png"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}